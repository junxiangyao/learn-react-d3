{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["pieArc","arc","innerRadius","outerRadius","App","useState","data","setData","useEffect","csv","then","console","log","colorPie","pie","value","width","height","transform","map","d","fill","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAqBMA,EAASC,cACZC,YAAY,GACZC,YAPW,KAgDCC,EAvCH,WAAI,MAGUC,mBAAS,MAHnB,mBAGPC,EAHO,KAGDC,EAHC,KASd,GALDC,qBAAU,WAAKC,YA1BD,8IA0BaC,MAAK,SAAAJ,GACzBC,EAAQD,GACZK,QAAQC,IAAI,sBACV,KAEAN,EACF,OAAO,6CAGTK,QAAQC,IAAIN,EAAK,IAEjB,IAAMO,EAAWC,cAAMC,MAAM,GAC7B,OACE,qBAAKC,MA1BK,IA0BWC,OAzBV,IAyBX,SACE,mBAAGC,UAAS,oBAzBFF,IAyBE,YAxBFC,IAwBE,KAAZ,SACGJ,EAASP,GAAMa,KAAI,SAAAC,GAAC,OACnB,sBACEC,KAAMD,EAAEd,KAAK,iBACbc,EAAGpB,EAAOoB,aCnCPE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c65d61de.chunk.js","sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport {csv, arc, pie} from 'd3'\n// import { message } from './message';\nconst csvURL = 'https://gist.githubusercontent.com/curran/b236990081a24761f7000567094914e0/raw/acd2b8cecfe51c520622fbaf407ee88b8796bfc6/cssNamedColors.csv'\n\n// message(csvURL);\n\n// const App = ()=>{\n//   const [data, setData] = useState(null);\n// \tuseEffect(()=>{csv(csvURL).then(data=>{\n//         setData(data);\n//     console.log(\"fetching data\")\n//   })},[])\n//   // useEffect(()=>csv(csvURL).then(setData),[]); // useEffect, the csv() will only be called once.\n//   return(<pre>{data ? message(data) : \"loading\"}</pre>);\n// }\nconst width = 960;\nconst height = 500;\nconst centerX = width / 2;\nconst centerY = height / 2;\n\nconst pieArc = arc()\n  .innerRadius(0)\n  .outerRadius(width);\n\nconst App = ()=>{\n\n  // Loading with D3\n  const [data, setData] = useState(null);\n\tuseEffect(()=>{csv(csvURL).then(data=>{\n        setData(data);\n    console.log(\"fetching data\")\n  })},[])\n\n  if(!data){\n    return <pre>Loading...</pre>;\n  }\n  // useEffect(()=>csv(csvURL).then(setData),[]); // useEffect, the csv() will only be called once.\n  console.log(data[0]);\n\n  const colorPie = pie().value(1);\n  return (\n    <svg width = {width} height = {height}>\n      <g transform={`translate(${centerX},${centerY})`}>\n        {colorPie(data).map(d=>(\n          <path\n            fill={d.data['RGB hex value']}\n            d={pieArc(d)}\n          />\n     ))}\n    </g>\n  </svg>\n  );\n  // {data.map((d,i) => (\n  //   <path\n  //     fill={d['RGB hex value']}\n  //     d={pieArc({\n  //       startAngle: i / data.length * 2 * Math.PI,\n  //       endAngle: (i + 1) / data.length * 2 * Math.PI\n  //     })} />\n  // ))}\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}