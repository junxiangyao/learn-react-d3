{"version":3,"sources":["PieChart.js","BarChart.js","reportWebVitals.js","index.js"],"names":["pieArc","arc","innerRadius","outerRadius","PieChart","useState","data","setData","useEffect","csv","then","console","log","colorPie","pie","value","width","height","style","margin","display","transform","map","d","i","fill","BarChart","Population","slice","yScale","scaleBand","domain","Country","range","xScale","scaleLinear","max","x","y","bandwidth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAqBMA,EAASC,cACZC,YAAY,GACZC,YAPW,KAiDCC,EAxCE,WAAI,MAGKC,mBAAS,MAHd,mBAGZC,EAHY,KAGNC,EAHM,KASnB,GALDC,qBAAU,WAAKC,YA1BD,8IA0BaC,MAAK,SAAAJ,GACzBC,EAAQD,GACZK,QAAQC,IAAI,sBACV,KAEAN,EACF,OAAO,6CAGTK,QAAQC,IAAIN,EAAK,IAEjB,IAAMO,EAAWC,cAAMC,MAAM,GAC7B,OACE,qBAAKC,MA1BK,IA0BWC,OAzBV,IAyB4BC,MAAO,CAACC,OAAO,OAAQC,QAAQ,SAAtE,SACE,mBAAGC,UAAS,oBAzBFL,IAyBE,YAxBFC,IAwBE,KAAZ,SACGJ,EAASP,GAAMgB,KAAI,SAACC,EAAEC,GAAH,OAClB,sBACEC,KAAMF,EAAEjB,KAAK,iBACbiB,EAAGvB,EAAOuB,IACHC,WC0BJE,EAhEE,WAAI,MAIKrB,mBAAS,MAJd,mBAIZC,EAJY,KAINC,EAJM,KAqBnB,GAVAC,qBAAU,WAKRC,YAvBW,kJAmBC,SAAAc,GAEV,OADAA,EAAEI,YAAcJ,EAAE,MACXA,KAEQb,MAAK,SAAAJ,GACpBC,EAAQD,EAAKsB,MAAM,EAAG,UAEvB,KAECtB,EACF,OAAO,6CAGTK,QAAQC,IAAIN,EAAK,IAEjB,IAAMuB,EAASC,cACZC,OAAOzB,EAAKgB,KAAI,SAAAC,GAAC,OAAEA,EAAES,YACrBC,MAAM,CAAC,EAhCG,MAsCPC,EAASC,cACZJ,OAAO,CAAC,EAAGK,YAAI9B,GAAM,SAAAiB,GAAC,OAAKA,EAAE,WAC7BU,MAAM,CAAC,EAzCE,MA2CZ,OACE,qBAAKjB,MA5CK,IA4CWC,OA3CV,IA2C4BC,MAAO,CAACC,OAAO,OAAQC,QAAQ,SAAtE,SACEd,EAAKgB,KAAI,SAACC,EAAEC,GAAH,OACR,sBACCa,EAAK,EACLC,EAAKT,EAAON,EAAES,SACdhB,MAASkB,EAAOX,EAAEI,YAClBV,OAASY,EAAOU,aACTf,SC7CAgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.03251f08.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport {csv, arc, pie} from 'd3'\n// import { message } from './message';\nconst csvURL = 'https://gist.githubusercontent.com/curran/b236990081a24761f7000567094914e0/raw/acd2b8cecfe51c520622fbaf407ee88b8796bfc6/cssNamedColors.csv'\n\n// message(csvURL);\n\n// const App = ()=>{\n//   const [data, setData] = useState(null);\n// \tuseEffect(()=>{csv(csvURL).then(data=>{\n//         setData(data);\n//     console.log(\"fetching data\")\n//   })},[])\n//   // useEffect(()=>csv(csvURL).then(setData),[]); // useEffect, the csv() will only be called once.\n//   return(<pre>{data ? message(data) : \"loading\"}</pre>);\n// }\nconst width = 960;\nconst height = 500;\nconst centerX = width / 2;\nconst centerY = height / 2;\n\nconst pieArc = arc()\n  .innerRadius(0)\n  .outerRadius(width);\n\nconst PieChart = ()=>{\n\n  // Loading with D3\n  const [data, setData] = useState(null);\n\tuseEffect(()=>{csv(csvURL).then(data=>{\n        setData(data);\n    console.log(\"fetching data\")\n  })},[])\n\n  if(!data){\n    return <pre>Loading...</pre>;\n  }\n  // useEffect(()=>csv(csvURL).then(setData),[]); // useEffect, the csv() will only be called once.\n  console.log(data[0]);\n\n  const colorPie = pie().value(1);\n  return (\n    <svg width = {width} height = {height} style={{margin:'auto', display:'block'}}>\n      <g transform={`translate(${centerX},${centerY})`}>\n        {colorPie(data).map((d,i)=>(\n          <path\n            fill={d.data['RGB hex value']}\n            d={pieArc(d)}\n            key = {i}\n          />\n     ))}\n    </g>\n  </svg>\n  );\n  // {data.map((d,i) => (\n  //   <path\n  //     fill={d['RGB hex value']}\n  //     d={pieArc({\n  //       startAngle: i / data.length * 2 * Math.PI,\n  //       endAngle: (i + 1) / data.length * 2 * Math.PI\n  //     })} />\n  // ))}\n}\n\n\nexport default PieChart;\n","import { useState, useCallback, useEffect } from 'react';\nimport {csv, scaleBand, scaleLinear, max} from 'd3'\n// import { message } from './message';\nconst csvURL = 'https://gist.githubusercontent.com/curran/0ac4077c7fc6390f5dd33bf5c06cb5ff/raw/605c54080c7a93a417a3cea93fd52e7550e76500/UN_Population_2019.csv'\n\n\nconst width = 960;\nconst height = 500;\n\n\nconst BarChart = ()=>{\n\n  // Loading with D3\n\n  const [data, setData] = useState(null);\n  // Deprecated - the population of 2020 should be parsed and stringified only once here, so the xScale was changed accordingly as well\n\t// useEffect(()=>{csv(csvURL).then(data=>{\n  //       setData(data);\n  //   console.log(\"fetching data\")\n  // })},[])\n\n  useEffect(() => {\n    const row = d => {\n      d.Population = +d['2020']; // the numeric population is saved as a new column in each row\n      return d;\n    };\n    csv(csvURL, row).then(data => {\n      setData(data.slice(0, 10));\n    });\n  }, []);\n\n  if(!data){\n    return <pre>Loading...</pre>;\n  }\n  // useEffect(()=>csv(csvURL).then(setData),[]); // useEffect, the csv() will only be called once.\n  console.log(data[0]);\n\n  const yScale = scaleBand()\n    .domain(data.map(d=>d.Country)) // get a new array contains country names.\n    .range([0,height])\n    /******\n    About scaleBand and domain\n    ??? https://www.d3indepth.com/scales/\n    ******/\n\n  const xScale = scaleLinear()\n    .domain([0, max(data, d => +d['2020'])])\n    .range([0, width]);\n\n  return (\n    <svg width = {width} height = {height} style={{margin:'auto', display:'block'}}>\n     {data.map((d,i) => (\n       <rect\n        x = {0}\n        y = {yScale(d.Country)}\n        width = {xScale(d.Population)}\n        height ={yScale.bandwidth()}\n        key = {i}/>\n      ))}\n    </svg>\n    // <svg width = {width} height = {height} style={{margin:'auto', display:'block'}}>\n    //  {data.map((d,i) => (\n    //    <rect\n    //     x = {0}\n    //     y = {yScale(d.Country)}\n    //     width = {xScale(d['2020'])} // this is deperecated for better performance\n    //     height ={yScale.bandwidth()}\n    //     key = {i}/>\n    //   ))}\n    // </svg>\n  );\n}\n\n\nexport default BarChart;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PieChart from './PieChart';\nimport BarChart from './BarChart';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PieChart/>\n    <BarChart/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}